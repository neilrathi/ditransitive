library(gbNgram)
install.packages('gbNgram')
devtools::install_github(chrismeserole/gbNgram)
library(devtools)
devtools::install_github(chrismeserole/gbNgram)
devtools::install_github(chrismeserole/gbNgram)
library(gbNgram)
devtools::install_github(chrismeserole/gbNgram)
library(devtools)
devtools::install_github(chrismeserole/gbNgram)
library(devtools)
library(devtools)
library(gbNgram)
library(devtools)
devtools::install_github(chrismeserole/gbNgram)
library(gbNgram)
devtools::install_github('chrismeserole/gbNgram')
library(gbNgram)
df <- data.frame(index=c(1, 2, 3, 4, 5, 6),
var1=c(4, 4, 5, 4, 3, 2),
var2=c(1, 2, 4, 4, 6, 9),
var3=c(9, 9, 9, 5, 5, 3))
df
df <- read.csv('accuracy.csv')
#create data frame
df <- read.csv('accuracy.csv')
df <- read.csv('accuracy.csv')
df <- read.csv('accuracy.csv')
library(tidyr)
library(ggplot2)
setwd('~/csboy/lm-ditransitive/analysis')
df <- read.csv('ngram.csv', sep = '\t')
df %>% filter(n, 'n = 3')
df %>% filter(n == 'n = 3')
filter(df$n == 'n = 3')
df[df$n == 'n = 3']
df
df[df$n == 'n = 3', ]
df
`%nin%` <- Negate(`%in%`)
df[df$n %nin% c('n = 3', 'n = 2'), ]
df[df$n %nin% c('n = 3', 'n = 2'), ] %>% ggplot(aes(x = factor(theme, levels = c('short', 'long')),
y = pref,
fill = factor(recipient, levels = c('short', 'long')))) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Theme Length', fill = 'Recipient Length', y = 'PO Preference (bits)') +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.4, position=position_dodge(.9), color = 'black', linewidth = 0.25) +
theme(legend.position="bottom") +
facet_grid(factor(n) ~ factor(k), scales = "free_x", space = "free_x", switch = "y")
ggsave('ngram_prefs.pdf', width = 7, height = 10, unit = 'in')
ggsave('ngram_prefs.png', width = 7, height = 10, unit = 'in')
df[df$n == 'n = 5', df$k == 'k = 2']
df[df[df$n == 'n = 5']$k == 'k = 2']
df1 <- df[df$n == 'n = 5', ]
df2 <- df1[df1$k == 'k = 2',]
df2
library(tidyr)
library(ggplot2)
setwd('~/csboy/lm-ditransitive/analysis')
df <- read.csv('lstm.csv', sep = '\t')
`%nin%` <- Negate(`%in%`)
df[df$n %nin% c('n = 3', 'n = 2'), ] %>% ggplot(aes(x = factor(theme, levels = c('short', 'long')),
y = pref,
fill = factor(recipient, levels = c('short', 'long')))) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Theme Length', fill = 'Recipient Length', y = 'PO Preference (bits)') +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.4, position=position_dodge(.9), color = 'black', linewidth = 0.25) +
theme(legend.position="bottom") +
facet_grid(factor(n) ~ factor(k), scales = "free_x", space = "free_x", switch = "y")
ggsave('lstm_prefs.pdf', width = 7, height = 10, unit = 'in')
ggsave('lstm_prefs.png', width = 7, height = 10, unit = 'in')
library(tidyr)
library(ggplot2)
setwd('~/csboy/lm-ditransitive/analysis')
df <- read.csv('lstm.csv', sep = '\t')
`%nin%` <- Negate(`%in%`)
df[df$n %nin% c('n = 8', 'n = 3', 'n = 2'), ] %>% ggplot(aes(x = factor(theme, levels = c('short', 'long')),
y = pref,
fill = factor(recipient, levels = c('short', 'long')))) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Theme Length', fill = 'Recipient Length', y = 'PO Preference (bits)') +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.4, position=position_dodge(.9), color = 'black', linewidth = 0.25) +
theme(legend.position="bottom") +
facet_grid(factor(n) ~ factor(k), scales = "free_x", space = "free_x", switch = "y")
ggsave('lstm_prefs.pdf', width = 7, height = 10, unit = 'in')
ggsave('lstm_prefs.png', width = 7, height = 10, unit = 'in')
library(tidyr)
library(ggplot2)
setwd('~/csboy/lm-ditransitive/analysis')
df <- read.csv('ngram.csv', sep = '\t')
`%nin%` <- Negate(`%in%`)
df[df$n %nin% c('n = 8', 'n = 3', 'n = 2'), ] %>% ggplot(aes(x = factor(theme, levels = c('short', 'long')),
y = pref,
fill = factor(recipient, levels = c('short', 'long')))) +
geom_bar(stat = 'identity', position = 'dodge') +
labs(x = 'Theme Length', fill = 'Recipient Length', y = 'PO Preference (bits)') +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.4, position=position_dodge(.9), color = 'black', linewidth = 0.25) +
theme(legend.position="bottom") +
facet_grid(factor(n) ~ factor(k), scales = "free_x", space = "free_x", switch = "y")
ggsave('ngram_prefs.pdf', width = 7, height = 10, unit = 'in')
ggsave('ngram_prefs.png', width = 7, height = 10, unit = 'in')
library(tidyverse)
library(extrafont) # font embedding
library(gridExtra)
library(viridis)
rm(list=ls())
setwd("~/csboy/ditransitive/")
library(rwebppl)
dfs <- list()
informativities = c('low', 'med', 'high')
priors <- c(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75)
costs <- c(0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75)
for (i in informativities) {
idf <- data.frame(double(), double(), double(), double())
names(idf) <- c('prior', 'cost', 'informativity', 'prob')
for (p in priors) {
for (cost in costs) {
settings <- data.frame(recipientprior = p, recipientcost = cost, informativity = i)
output <- c(webppl(program_file = 'models/model.js', data = settings, data_var = "dataFromR"))
idf[nrow(idf) + 1,] <- c(p, cost, i, data.frame(prob = output)[1, 'prob'])
}
}
dfs[[i]] <- idf
}
combined_df <- do.call(rbind, dfs)
combined_df$prior <- as.numeric(combined_df$prior)
combined_df$cost <- as.numeric(combined_df$cost)
combined_df$prob <- as.numeric(combined_df$prob)
combined_df$informativity <- factor(combined_df$informativity)
ggplot(combined_df, aes(x = prior, y = cost, fill = prob)) +
geom_tile() +
scale_fill_viridis() +
labs(x = "prior probability of recipient", y = "cost of recipient", fill = "probability") +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high')))
ggplot(combined_df, aes(x = cost, y = prob)) +
geom_bar(stat = 'identity') +
ylim(0, 1) +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high')))
ggplot(combined_df, aes(x = cost, y = prob)) +
geom_bar(stat = 'identity') +
ylim(0, 1) +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high')))
ggplot(combined_df, aes(x = prior, y = prob)) +
geom_bar(stat = 'identity') +
ylim(0, 1) +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high')))
combined_df
ggplot(combined_df, aes(x = prior, y = prob)) +
geom_bar(stat = 'identity') +
ylim(0, 1) +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high')))
ggplot(combined_df, aes(x = prior, y = prob)) +
geom_bar(stat = 'identity') +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high')))
library(tidyverse)
library(extrafont) # font embedding
library(gridExtra)
library(viridis)
rm(list=ls())
setwd("~/csboy/ditransitive/")
library(rwebppl)
dfs <- list()
informativities = c('low', 'med', 'high')
for (i in informativities) {
idf <- data.frame(double(), double(), double())
names(idf) <- c('informativity', 'prob', 'tr')
settings <- data.frame(informativity = i)
output <- c(webppl(program_file = 'models/simple_model.js', data = settings, data_var = "dataFromR"))
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[1, 'prob'], 'recipient')
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[2, 'prob'], 'theme')
dfs[[i]] <- idf
}
combined_df <- do.call(rbind, dfs)
combined_df$prob <- as.numeric(combined_df$prob)
combined_df$informativity <- factor(combined_df$informativity)
ggplot(combined_df, aes(x = tr, y = prob, fill = tr)) +
geom_bar(stat = 'identity') +
ylab('Production Probability') +
xlab('Constituent') +
theme(legend.position="bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_blank()) +
facet_wrap(~factor(informativity, levels=c('low', 'med', 'high'))) +
scale_y_continuous(breaks = seq(0, 1, .1), limits = c(0, 1)) +
geom_hline(yintercept = 0, linewidth = .3)
for (df in dfs) {
combined_df <- bind_rows(combined_df, df, .id = "source")
}
ggsave("plots/informativity.png", width=6, height=4, units = "in", dpi = 300)
dfs <- list()
informativities = c('control', 'low', 'med', 'high')
for (i in informativities) {
idf <- data.frame(double(), double(), double())
names(idf) <- c('informativity', 'prob', 'tr')
settings <- data.frame(informativity = i)
output <- c(webppl(program_file = 'models/simple_model.js', data = settings, data_var = "dataFromR"))
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[1, 'prob'], 'recipient')
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[2, 'prob'], 'theme')
dfs[[i]] <- idf
}
library(tidyverse)
library(extrafont) # font embedding
library(gridExtra)
library(viridis)
rm(list=ls())
setwd("~/csboy/ditransitive/")
library(rwebppl)
dfs <- list()
informativities = c('control', 'low', 'med', 'high')
for (i in informativities) {
idf <- data.frame(double(), double(), double())
names(idf) <- c('informativity', 'prob', 'tr')
settings <- data.frame(informativity = i)
output <- c(webppl(program_file = 'models/simple_model.js', data = settings, data_var = "dataFromR"))
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[1, 'prob'], 'recipient')
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[2, 'prob'], 'theme')
dfs[[i]] <- idf
}
dfs <- list()
informativities = c('low', 'high')
for (i in informativities) {
idf <- data.frame(double(), double(), double())
names(idf) <- c('informativity', 'prob', 'tr')
settings <- data.frame(informativity = i)
output <- c(webppl(program_file = 'models/simple_model.js', data = settings, data_var = "dataFromR"))
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[1, 'prob'], 'recipient')
idf[nrow(idf) + 1,] <- c(i, data.frame(prob = output)[2, 'prob'], 'theme')
dfs[[i]] <- idf
}
combined_df <- do.call(rbind, dfs)
combined_df$prob <- as.numeric(combined_df$prob)
combined_df$informativity <- factor(combined_df$informativity)
combined_df
small_df <- data.frame(informativity = c("control", "control"), prob = c(0.5, 0.5), tr = c("recipient", "theme"))
small_df
total_df <- rbind(combined_df, small_df)
total_df
ggplot(total_df, aes(x = tr, y = prob, fill = tr)) +
geom_bar(stat = 'identity') +
ylab('Production Probability') +
xlab('Constituent') +
theme(legend.position="bottom",
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x=element_blank(),
legend.title = element_blank()) +
facet_wrap(~factor(informativity, levels=c('control', 'low', 'med', 'high'))) +
scale_y_continuous(breaks = seq(0, 1, .1), limits = c(0, 1)) +
geom_hline(yintercept = 0, linewidth = .3)
ggsave("plots/informativity.png", width=6, height=4, units = "in", dpi = 300)
